/[ \t]/  { /* Skip blanks and tabs. */ }

/input/ { return INPUT }
/output/ { return OUTPUT }

/,/ { return COMMA }
/;/ {return SC}
/do/ {return DO}
/initiate/ {return INITIATE}
/\(/ { return LPAR }
/\)/ { return RPAR }
/\[/ { return LBR }
/\|/ { return PIPE}
/\]/ { return RBR }
/>=/ { return GE }
/>/ { return G}
/send/ {return SEND}
/<>/ {return NEQ}
/=/ { return EQ}
/#/ {return DIESI}
/<=/ { return LE }
/\// { return DIV}
/</ { return L}
/\+/ { return ADD}
/\-/ { return MINUS}
/@/ { return AT}
/\^/ { return EXP}
/\*/ { return TIMES}
/false/ {return FALSE}
/true/ {return TRUE}
/on/ {return ON}
/end/ {return END}
/and/ {return AND}
/or/ {return OR}
/<-/ {return ASSIGN}
/not/ {return NOT}
/ite/ {return ITE}
/bool/ {return BOOL}
/int/ {return INT}
/string/ {return STR}
/real/ {return REAL}
/[-]?([0-9]*[.])[0-9]+/ { lval.realn, _ = strconv.ParseFloat(yylex.Text(),64); return REALNUM}
/-[0-9]+/ { lval.n,_ = strconv.Atoi(yylex.Text()); return NUM }
/[0-9]+/ { lval.n,_ = strconv.Atoi(yylex.Text()); return NUM }
/[a-zA-Z][a-zA-Z0-9_]*/ { lval.name = yylex.Text(); return ID}
/\"[a-zA-Z0-9_]*\"/ { lval.name = yylex.Text(); return LITERAL}
/\n/ { }
/./ {  }

//
package internals
import ("strconv")
