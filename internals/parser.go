// Code generated by goyacc -o internals/parser.go internals/parser.y. DO NOT EDIT.

//line internals/parser.y:2
package internals

import __yyfmt__ "fmt"

//line internals/parser.y:2

var SymbolTable = []map[string]*IDNode{}
var Root Node
var current_symbol_index = -1

var predefinedIDs = []*IDNode{}
var inputDefs = [][]*IDNode{}
var outputDefs = [][]*IDNode{}
var globalDefs = []*GlobalDefNode{}

var GLOBAL bool = true

//line internals/parser.y:17
type yySymType struct {
	yys   int
	n     int
	realn float64
	name  string
	tt    Typos
	*IDNode
	Node
}

const INPUT = 57346
const ID = 57347
const END = 57348
const OUTPUT = 57349
const ON = 57350
const ASSIGN = 57351
const COMMA = 57352
const NUM = 57353
const LITERAL = 57354
const DO = 57355
const SEND = 57356
const LPAR = 57357
const RPAR = 57358
const PIPE = 57359
const LBR = 57360
const RBR = 57361
const BOOL = 57362
const INT = 57363
const STR = 57364
const REAL = 57365
const EQ = 57366
const NEQ = 57367
const GE = 57368
const G = 57369
const LE = 57370
const L = 57371
const ADD = 57372
const MINUS = 57373
const DIV = 57374
const EXP = 57375
const TIMES = 57376
const AND = 57377
const OR = 57378
const NOT = 57379
const ITE = 57380
const SC = 57381
const DIESI = 57382
const AT = 57383
const FALSE = 57384
const TRUE = 57385
const INITIATE = 57386
const REALNUM = 57387

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"INPUT",
	"ID",
	"END",
	"OUTPUT",
	"ON",
	"ASSIGN",
	"COMMA",
	"NUM",
	"LITERAL",
	"DO",
	"SEND",
	"LPAR",
	"RPAR",
	"PIPE",
	"LBR",
	"RBR",
	"BOOL",
	"INT",
	"STR",
	"REAL",
	"EQ",
	"NEQ",
	"GE",
	"G",
	"LE",
	"L",
	"ADD",
	"MINUS",
	"DIV",
	"EXP",
	"TIMES",
	"AND",
	"OR",
	"NOT",
	"ITE",
	"SC",
	"DIESI",
	"AT",
	"FALSE",
	"TRUE",
	"INITIATE",
	"REALNUM",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line internals/parser.y:462

//line yacctab:1
var yyExca = [...]int8{
	-1, 0,
	8, 6,
	-2, 1,
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 199

var yyAct = [...]uint8{
	93, 50, 53, 104, 59, 57, 56, 3, 63, 58,
	131, 32, 75, 77, 30, 86, 55, 60, 66, 67,
	75, 28, 64, 25, 65, 39, 66, 67, 90, 75,
	97, 91, 65, 120, 130, 66, 67, 128, 69, 97,
	46, 65, 137, 124, 61, 54, 52, 72, 70, 73,
	74, 134, 68, 86, 23, 24, 102, 26, 41, 86,
	68, 84, 85, 86, 44, 95, 96, 94, 89, 68,
	88, 92, 127, 139, 99, 100, 31, 101, 126, 106,
	107, 108, 109, 110, 111, 105, 87, 98, 43, 121,
	115, 9, 122, 114, 116, 117, 76, 119, 123, 21,
	118, 112, 113, 84, 85, 84, 85, 125, 75, 11,
	12, 13, 14, 29, 66, 67, 136, 33, 64, 32,
	65, 45, 19, 6, 34, 52, 129, 8, 29, 52,
	133, 132, 36, 135, 69, 18, 105, 52, 138, 47,
	61, 10, 75, 72, 70, 73, 74, 75, 68, 48,
	40, 20, 121, 66, 67, 17, 16, 97, 22, 65,
	83, 82, 80, 81, 78, 79, 84, 85, 7, 11,
	12, 13, 14, 69, 83, 82, 80, 81, 78, 79,
	84, 85, 2, 70, 5, 103, 42, 68, 62, 15,
	71, 37, 35, 27, 1, 4, 38, 49, 51,
}

var yyPact = [...]int16{
	-37, -1000, 115, 89, 115, -1000, 151, 149, -1000, 113,
	146, -1000, -1000, -1000, -1000, -1000, 84, -1000, -1000, 12,
	-1000, 89, -25, -1000, -1000, -1000, -1000, 60, 109, -1000,
	-1000, 104, 89, 125, -1000, 145, 89, 74, 145, -1000,
	112, 1, 133, 144, -1000, 7, -1000, -1000, 81, -26,
	-1000, -1000, 150, -21, 71, 36, -7, -1000, -1000, -2,
	-1000, 103, -1000, -1000, 103, 142, -1000, -1000, -1000, 142,
	24, -1000, 15, -1000, -1000, -1000, 137, -1000, 142, 142,
	142, 142, 142, 142, 142, 142, 103, 103, 142, 142,
	103, 142, -1000, 150, 17, 136, 75, 142, -1000, -1000,
	25, -1000, 24, 62, -1000, -1000, 31, 31, 31, 31,
	31, 31, 36, 36, -7, 27, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 73, 103, 16, -29, 137, 103, 32,
	103, -1000, -1000, 106, -1000, 23, 103, -1000, 57, -1000,
}

var yyPgo = [...]uint8{
	0, 8, 198, 197, 196, 195, 184, 91, 21, 194,
	193, 192, 191, 25, 0, 1, 16, 5, 17, 4,
	190, 2, 6, 9, 188, 186, 185, 3, 182, 168,
	127, 158, 141,
}

var yyR1 = [...]int8{
	0, 9, 9, 5, 5, 28, 28, 29, 29, 30,
	31, 31, 31, 31, 6, 10, 11, 12, 4, 4,
	13, 25, 26, 26, 27, 3, 3, 15, 15, 21,
	21, 22, 22, 23, 23, 24, 24, 24, 24, 24,
	24, 20, 20, 20, 20, 20, 20, 14, 14, 14,
	16, 16, 16, 17, 17, 18, 18, 18, 2, 8,
	8, 1, 19, 19, 19, 19, 19, 19, 7, 32,
	32, 32, 32,
}

var yyR2 = [...]int8{
	0, 0, 2, 2, 1, 3, 0, 2, 1, 4,
	1, 1, 1, 1, 10, 1, 3, 1, 2, 1,
	4, 6, 3, 1, 1, 1, 1, 1, 1, 3,
	1, 3, 1, 2, 1, 1, 3, 2, 6, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 1,
	3, 3, 1, 3, 1, 2, 5, 1, 8, 3,
	1, 1, 1, 3, 3, 1, 1, 1, 2, 1,
	1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -9, -28, 44, -5, -6, 8, -29, -30, -7,
	-32, 20, 21, 22, 23, -6, 5, 6, -30, 9,
	5, 15, -31, 42, 43, 11, 45, -10, -8, -7,
	39, 16, 10, 13, -7, -11, 7, -12, -4, -13,
	5, -8, -25, 14, -13, 9, 39, 6, 5, -3,
	-15, -2, -14, -21, 38, -16, -22, -17, -23, -19,
	-18, 37, -24, -1, 15, 17, 11, 12, 45, 31,
	41, -20, 40, 42, 43, 5, 15, 39, 28, 29,
	26, 27, 25, 24, 30, 31, 36, 15, 34, 32,
	35, 33, -23, -14, -21, -14, -14, 15, -18, -19,
	-19, -19, 41, -26, -27, -1, -14, -14, -14, -14,
	-14, -14, -16, -16, -22, -21, -17, -17, -23, -17,
	16, 16, 17, -14, 18, -19, 16, 10, 10, -15,
	18, 39, -27, -15, 19, -21, 10, 19, -15, 16,
}

var yyDef = [...]int8{
	-2, -2, 0, 0, 2, 4, 0, 0, 8, 0,
	0, 69, 70, 71, 72, 3, 0, 5, 7, 0,
	68, 0, 0, 10, 11, 12, 13, 0, 15, 60,
	9, 0, 0, 0, 59, 0, 0, 0, 17, 19,
	0, 0, 0, 0, 18, 0, 16, 14, 0, 0,
	25, 26, 27, 28, 0, 49, 30, 52, 32, 57,
	54, 0, 34, 62, 0, 0, 65, 66, 67, 0,
	0, 35, 0, 39, 40, 61, 0, 20, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 33, 0, 0, 0, 0, 0, 55, 57,
	0, 37, 0, 0, 23, 24, 41, 42, 43, 44,
	45, 46, 47, 48, 29, 0, 50, 51, 31, 53,
	36, 63, 64, 0, 0, 0, 0, 0, 0, 0,
	0, 21, 22, 0, 56, 0, 0, 38, 0, 58,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-0 : yypt+1]
//line internals/parser.y:36
		{

			yyVAL.Node = EmptyProgramNode{}
			Root = yyVAL.Node
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line internals/parser.y:41
		{

			yyVAL.Node = ProgramNode{
				GlobalVars: yyDollar[1].Node,
				Events:     yyDollar[2].Node,
			}
			Root = yyVAL.Node
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line internals/parser.y:51
		{
			yyVAL.Node = EventListNode{yyDollar[1].Node, yyDollar[2].Node}
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internals/parser.y:54
		{
			yyVAL.Node = yyDollar[1].Node
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line internals/parser.y:59
		{

			createSymbolTable()
			GLOBAL = false

			yyVAL.Node = yyDollar[2].Node
		}
	case 6:
		yyDollar = yyS[yypt-0 : yypt+1]
//line internals/parser.y:66
		{

			createSymbolTable()
			GLOBAL = false

			yyVAL.Node = EmptyGlobalDefNode{}
		}
	case 7:
		yyDollar = yyS[yypt-2 : yypt+1]
//line internals/parser.y:75
		{

			yyVAL.Node = GlobalDefListNode{
				GlobalDefinitions: yyDollar[1].Node,
				GlobalDefinition:  yyDollar[2].Node,
			}
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internals/parser.y:82
		{

			yyVAL.Node = yyDollar[1].Node
		}
	case 9:
		yyDollar = yyS[yypt-4 : yypt+1]
//line internals/parser.y:88
		{

			assertSameTypeNodes(yyDollar[1].Node.(VarDeclNode).IDVar, yyDollar[3].Node)

			p := GlobalDefNode{
				VarDecl: yyDollar[1].Node,
				Value:   yyDollar[3].Node,
			}

			globalDefs = append(globalDefs, &p)

			yyVAL.Node = p
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internals/parser.y:103
		{
			yyVAL.Node = BooleanNode{"False"}
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internals/parser.y:106
		{
			yyVAL.Node = BooleanNode{"True"}
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internals/parser.y:109
		{
			yyVAL.Node = NumNode{yyDollar[1].n}
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internals/parser.y:112
		{
			yyVAL.Node = RealNumNode{yyDollar[1].realn}
		}
	case 14:
		yyDollar = yyS[yypt-10 : yypt+1]
//line internals/parser.y:117
		{

			yyVAL.Node = EventNode{
				Name:       yyDollar[2].name,
				CurIndex:   current_symbol_index,
				InputsLen:  len(inputDefs[current_symbol_index-1]),
				OutputsLen: len(outputDefs[current_symbol_index-1]),
				Inputs:     yyDollar[4].Node,
				Outputs:    yyDollar[7].Node,
				Defs:       yyDollar[8].Node,
				SendStmt:   yyDollar[9].Node,
			}

			createSymbolTable()

		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internals/parser.y:135
		{

			for _, idNode := range predefinedIDs {
				idNode.tstream = InputStream
			}

			copyOfDefs := make([]*IDNode, len(predefinedIDs))
			copy(copyOfDefs, predefinedIDs[:])
			inputDefs = append(inputDefs, copyOfDefs)

			predefinedIDs = predefinedIDs[:0]

			yyVAL.Node = InputNode{yyDollar[1].Node}
		}
	case 16:
		yyDollar = yyS[yypt-3 : yypt+1]
//line internals/parser.y:152
		{

			for _, idNode := range predefinedIDs {
				idNode.tstream = OutputStream
			}

			copyOfDefs := make([]*IDNode, len(predefinedIDs))
			copy(copyOfDefs, predefinedIDs[:])
			outputDefs = append(outputDefs, copyOfDefs)

			predefinedIDs = predefinedIDs[:0]

			yyVAL.Node = OutputNode{yyDollar[2].Node}
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internals/parser.y:168
		{
			yyVAL.Node = yyDollar[1].Node
		}
	case 18:
		yyDollar = yyS[yypt-2 : yypt+1]
//line internals/parser.y:173
		{

			yyVAL.Node = StatementListNode{
				Left:  yyDollar[1].Node,
				Right: yyDollar[2].Node,
			}

		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internals/parser.y:181
		{
			yyVAL.Node = yyDollar[1].Node
		}
	case 20:
		yyDollar = yyS[yypt-4 : yypt+1]
//line internals/parser.y:186
		{

			assertDefined(yyDollar[1].name)
			assertSameType(yyDollar[1].name, yyDollar[3].Node)

			if !(getSymbol(yyDollar[1].name).tstream == OutputStream) && !definedGlobalSymbol(yyDollar[1].name) {

				compilerError("Variable " + yyDollar[1].name + " is not output stream or global.")
			}

			yyVAL.Node = StatementNode{
				Lval: getSymbol(yyDollar[1].name),
				Rval: yyDollar[3].Node,
			}

		}
	case 21:
		yyDollar = yyS[yypt-6 : yypt+1]
//line internals/parser.y:204
		{
			yyVAL.Node = SendNode{
				Name:    yyDollar[2].name,
				OutVars: yyDollar[4].Node,
			}
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
//line internals/parser.y:212
		{

			yyVAL.Node = OutVarListNode{
				OutVars: yyDollar[1].Node,
				OutVar:  yyDollar[3].Node,
			}
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internals/parser.y:219
		{
			yyVAL.Node = yyDollar[1].Node
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internals/parser.y:224
		{

			yyVAL.Node = OutVarNode{
				Var: yyDollar[1].Node,
			}

		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internals/parser.y:234
		{
			yyVAL.Node = yyDollar[1].Node
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internals/parser.y:237
		{
			yyVAL.Node = yyDollar[1].Node
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internals/parser.y:242
		{
			yyVAL.Node = yyDollar[1].Node
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internals/parser.y:245
		{
			yyVAL.Node = yyDollar[1].Node
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
//line internals/parser.y:250
		{
			yyVAL.Node = BinaryOpNode{yyDollar[1].Node, "or", yyDollar[3].Node, Boolean}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internals/parser.y:253
		{
			yyVAL.Node = yyDollar[1].Node
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line internals/parser.y:258
		{
			yyVAL.Node = BinaryOpNode{yyDollar[1].Node, "and", yyDollar[3].Node, Boolean}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internals/parser.y:261
		{
			yyVAL.Node = yyDollar[1].Node
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
//line internals/parser.y:266
		{
			yyVAL.Node = UnaryOpNode{"not", yyDollar[2].Node, Boolean}
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internals/parser.y:269
		{
			yyVAL.Node = yyDollar[1].Node
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internals/parser.y:274
		{
			yyVAL.Node = yyDollar[1].Node
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line internals/parser.y:277
		{
			yyVAL.Node = ParenthesisOpNode{yyDollar[2].Node, Boolean}
		}
	case 37:
		yyDollar = yyS[yypt-2 : yypt+1]
//line internals/parser.y:280
		{
			assertNodeType(yyDollar[2].Node, Boolean)
			yyVAL.Node = yyDollar[2].Node
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line internals/parser.y:284
		{

			assertSameTypeNodes(yyDollar[3].Node, yyDollar[5].Node)
			yyVAL.Node = PastOpNode{yyDollar[3].Node, yyDollar[3].Node.(*IDNode).getType(), yyDollar[5].Node}

		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internals/parser.y:290
		{
			yyVAL.Node = BooleanNode{"False"}
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internals/parser.y:293
		{
			yyVAL.Node = BooleanNode{"True"}
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line internals/parser.y:298
		{
			yyVAL.Node = BinaryOpNode{yyDollar[1].Node, "<=", yyDollar[3].Node, Boolean}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line internals/parser.y:301
		{
			yyVAL.Node = BinaryOpNode{yyDollar[1].Node, "<", yyDollar[3].Node, Boolean}
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line internals/parser.y:304
		{
			yyVAL.Node = BinaryOpNode{yyDollar[1].Node, ">=", yyDollar[3].Node, Boolean}
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line internals/parser.y:307
		{
			yyVAL.Node = BinaryOpNode{yyDollar[1].Node, ">", yyDollar[3].Node, Boolean}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line internals/parser.y:310
		{
			yyVAL.Node = BinaryOpNode{yyDollar[1].Node, "!=", yyDollar[3].Node, Boolean}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line internals/parser.y:313
		{
			yyVAL.Node = BinaryOpNode{yyDollar[1].Node, "==", yyDollar[3].Node, Boolean}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line internals/parser.y:322
		{
			yyVAL.Node = BinaryOpNode{yyDollar[1].Node, "+", yyDollar[3].Node, Integer}
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line internals/parser.y:325
		{
			yyVAL.Node = BinaryOpNode{yyDollar[1].Node, "-", yyDollar[3].Node, Integer}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internals/parser.y:328
		{
			yyVAL.Node = yyDollar[1].Node
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line internals/parser.y:333
		{

			yyVAL.Node = BinaryOpNode{yyDollar[1].Node, "*", yyDollar[3].Node, Integer}

		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line internals/parser.y:338
		{

			yyVAL.Node = BinaryOpNode{yyDollar[1].Node, "//", yyDollar[3].Node, Integer}

		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internals/parser.y:343
		{
			yyVAL.Node = yyDollar[1].Node
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line internals/parser.y:348
		{
			yyVAL.Node = BinaryOpNode{yyDollar[1].Node, "**", yyDollar[3].Node, Integer}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internals/parser.y:351
		{
			yyVAL.Node = yyDollar[1].Node
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line internals/parser.y:356
		{
			yyVAL.Node = UnaryOpNode{"-", yyDollar[2].Node, Integer}
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
//line internals/parser.y:359
		{

			assertSameTypeNodes(yyDollar[2].Node, yyDollar[4].Node)
			yyVAL.Node = PastOpNode{yyDollar[2].Node, yyDollar[2].Node.(*IDNode).getType(), yyDollar[4].Node}

		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internals/parser.y:365
		{
			yyVAL.Node = yyDollar[1].Node
		}
	case 58:
		yyDollar = yyS[yypt-8 : yypt+1]
//line internals/parser.y:370
		{

			assertSameTypeNodes(yyDollar[5].Node, yyDollar[7].Node)

			yyVAL.Node = IteNode{
				Condition: yyDollar[3].Node,
				Then:      yyDollar[5].Node,
				Else:      yyDollar[7].Node,
				Type:      getExpressionType(yyDollar[5].Node),
			}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line internals/parser.y:384
		{
			yyVAL.Node = VarDecListNode{yyDollar[1].Node, yyDollar[3].Node}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internals/parser.y:387
		{

			yyVAL.Node = yyDollar[1].Node
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internals/parser.y:393
		{
			assertDefined(yyDollar[1].name)
			yyVAL.Node = getSymbol(yyDollar[1].name)
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internals/parser.y:399
		{
			yyVAL.Node = yyDollar[1].Node
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line internals/parser.y:402
		{
			yyVAL.Node = ParenthesisOpNode{yyDollar[2].Node, Integer}
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line internals/parser.y:405
		{
			yyVAL.Node = AbsOpNode{yyDollar[2].Node, Integer}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internals/parser.y:408
		{
			yyVAL.Node = NumNode{yyDollar[1].n}
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internals/parser.y:411
		{
			yyVAL.Node = StrNode{yyDollar[1].name}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internals/parser.y:414
		{
			yyVAL.Node = RealNumNode{yyDollar[1].realn}
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line internals/parser.y:419
		{

			if definedSymbol(yyDollar[2].name) {
				compilerError("Syntax Error: The variable already exists.")
			}

			pr := prefix()
			p := IDNode{prefix: pr, name: yyDollar[2].name, Type: yyDollar[1].tt}

			if GLOBAL == false {

				predefinedIDs = append(predefinedIDs, &p)
			}

			n := VarDeclNode{
				Type:  yyDollar[1].tt,
				IDVar: &p,
				Value: nil,
			}

			addSymbol(yyDollar[2].name, &p)

			yyVAL.Node = n
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internals/parser.y:444
		{
			var t Typos = Boolean
			yyVAL.tt = t
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internals/parser.y:448
		{
			var t Typos = Integer
			yyVAL.tt = t
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internals/parser.y:452
		{
			var t Typos = String
			yyVAL.tt = t
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internals/parser.y:456
		{
			var t Typos = Real
			yyVAL.tt = t
		}
	}
	goto yystack /* stack new state and value */
}
